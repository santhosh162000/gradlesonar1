name: Release using custom scripts

on:
  workflow_dispatch

jobs:
  determine_version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Determine Version
        id: determine_version
        run: |
          COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.sha }})
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null)

          if [[ -n $CURRENT_VERSION ]]; then
            VERSION=${CURRENT_VERSION#"v"}
          else
            VERSION="1.0.0"
          fi

          if [[ $COMMIT_MESSAGE == *"[major]"* ]]; then
            MAJOR=$((${{ steps.determine_version.outputs.major }} + 1))
            MINOR=0
            PATCH=0
          elif [[ $COMMIT_MESSAGE == *"[minor]"* ]]; then
            MAJOR=${{ steps.determine_version.outputs.major }}
            MINOR=$((${{ steps.determine_version.outputs.minor }} + 1))
            PATCH=0
          else
            MAJOR=${{ steps.determine_version.outputs.major }}
            MINOR=${{ steps.determine_version.outputs.minor }}
            PATCH=$((${{ steps.determine_version.outputs.patch }} + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "::set-output name=new_version::$NEW_VERSION"

  create_release:
    needs: determine_version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: v${{ needs.determine_version.outputs.new_version }}
          release_name: Release v${{ needs.determine_version.outputs.new_version }}
          body: |
            Add release notes or description here
          draft: false
          prerelease: false
